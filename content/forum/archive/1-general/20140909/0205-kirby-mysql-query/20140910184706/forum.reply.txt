User: Crisp_Concepts

----

Date: 2014-09-10 18:47:06

----

Text: I've been doing some additional research into the matter and decided to try and convert a log in script that was half traditional php half Kirby functions..

The following is all here say/personal opinion/my own perception of fact:

Ultimately based on the toolkit doc descriptions and some examples shown on the toolkit home page, I believe db::query() isn't really needed when living an all Kirby lifestyle. It seems that it's a way to wrap traditional query strings in a Kirby function to help it "fit in" with the cool kids.

db::select() seems to be the way to go. There also seems to be a db::count() function that further simplifies things such as a log in script where you want to verify that there is 1 match in a table.


That said my script starts off with:

	db::connect();

This doesn't need any properties, because I have the properties already set in my Kirby config file.

Then I get the form submissions, also using the Kirby helper get() which is valid for both $_GET and $_POST submissions.

	$myusername = get('username');
	$mypassword = get('password');
	$mypassword = sha1($mypassword);

Next, while I used to use both strip slashes and escape string, I see there's a new Kirby function called db::escape() that appears to do both. So I've reduced this from the original 4 lines to 2 lines. Maybe I should combine them all with the above in a nested way, but for now lets just continue..

	$myusername = db::escape($myusername);
	$mypassword = db::escape($mypassword);

Here's where I run the submission against the database. I've left the db::select() example in there, even though it's not being used. If I use that, I still have to count() the results. So instead, we can use db::count()

	$table = "users";
	$where = array('username'=>$myusername,'password'=>$mypassword);
	$query = db::select($table,'*',$where); // irrelevant to script
	$count = db::count($table,$where);

I can finish up by making sure the count == 1, setting a cookie so they stay logged in even across multiple servers on a load balancer, update the database with the last_login, and forward them to the home page. If it fails, it sends them back to the log in page with an error in a rudimentary way.

	if($count==1):
		cookie::set('_rtsu', $myusername, 86400);
		db::update($table,array('last_login'=>'NOW()'),array('username'=>$myusername));
		go("/home");
	else:
		go("/login?error=failed_login");
	endif;


All said and done we end up with:

	<?php

		db::connect();

		$myusername = db::escape(get('username'));
		$mypassword = db::escape(sha1(get('password')));

		$table = "users";
		$where = array('username'=>$myusername,'password'=>$mypassword);
		$query = db::select($table,'*',$where);
		$count = db::count($table,$where);

		if($count==1):
			cookie::set('_rtsu', $myusername, 86400);
			db::update($table,array('last_login'=>'NOW()'),array('username'=>$myusername));
			go("/home");
		else:
			go("/login?error=failed_login");
		endif;

	?>