Date: 2015-02-05 15:40:28

----

User: joshheyer

----

Text: @thinkitsimple 

The code @janstieler suggested will work if you want every 2nd div within another div to be colored red. But keep in mind this will apply to every div tag on the page that is nested within another div. That may or may not be what you want.

I'd suggest you use classes (and possibly id's) on the elements to target the elements you want to style. For example, let's say your HTML looks like this:
```
<div> ... other stuff ... </div>
<div> ... other stuff ... </div>
<div> ... other stuff ... </div>
<div> ... other stuff ... </div>
```
Then add a class to style all of the div elements to style them the same:
```
<div class="wrapper"> ... other stuff ... </div>
<div class="wrapper"> ... other stuff ... </div>
<div class="wrapper"> ... other stuff ... </div>
<div class="wrapper"> ... other stuff ... </div>
```
Then you can style them like so:
```
<style type="text/css">
  .wrapper {
    width: 100%;
    padding-top: 30px;
    padding-bottom: 30px;
    background: white;
  }
</style>
```
Then add an `id` to style them uniquely:
```
<div class="wrapper" id="intro"> ... other stuff ... </div>
<div class="wrapper" id="featured"> ... other stuff ... </div>
<div class="wrapper" id="projects"> ... other stuff ... </div>
<div class="wrapper" id="contact"> ... other stuff ... </div>
```
Now you can differentiate the backgrounds:
```
<style type="text/css">
  .wrapper {
    width: 100%;
    padding-top: 30px;
    padding-bottom: 30px;
    background: white;
  }
  #intro {
    background: blue;
  }
  #projects {
    background: green;
  }
  /* I'm not adding styles for #featured and #contact
  because I want them to use the base .wrapper styles 
  and remain white */
</style>
```
The `.wrapper` class will serve a base style across all of the elements and while the id's like `#intro` and `#projects` serve to tweak those particular elements making them styled differently.

**Note:** id's have a higher specificity value than classes, so they'll override the classes rules. (link: http://css-tricks.com/specifics-on-css-specificity/   text: Learn more about specificity) and (link: http://css-tricks.com/strategies-keeping-css-specificity-low/   text: how to keep specificity low).