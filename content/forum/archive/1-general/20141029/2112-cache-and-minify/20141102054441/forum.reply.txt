Date: 2014-11-02 05:44:41

----

User: jimmyrittenborg

----

Text: There is just as very little to minify in html as there is to minify css and js ..or ..there is actually more, as css and js ends up being cached, your html shouldn't.

So yes html is indeed a valid frontend performance optimization, as every single byte counts today, where mobile is primary over desktop.

My brother, many gives a sh** about the craft of frontend performance, therfore you'll find yourself making hard decisions for achieving perfection in return of becoming a heck of a frontend dev (link: https://twitter.com/hashtag/perfmatters?src=hash text: #perfmatters)

I don't think it's yet possible to manipulate the output of kirby like this out-of the box, so please open an issue at the (link: https://github.com/getkirby/kirby text: getkirby repositories over at github.com)

My own way of doing these optimizations is a bit more complicated and requires to overwrite the cache async for stuff to go together, but that way you can achieve all sorts of magic like inline Above The Fold styles on the fly ;) But it's a lonely dusty road to go down, if it isn't for a single bigger and important kirby install and much of this stuff has to work together, but if that's the case, it might be worth, hacking the core a line or two for :)

You could also have a look at mod_pagespeed for apache and ngx_pagespeed, if you want all this stuff (and even more) for many smaller sites, where hacking the core isn't particular sufficient.

Anyway, this function returns minified html for you

```php
function minifyHtml($html){

		// Split the markup based on the tags that shall be preserved
		// $arrChunks = preg_split('@(</?pre[^>]*>)|(</?script[^>]*>)|(</?style[^>]*>)|( ?</?textarea[^>]*>)@i', $html, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);
		$arrChunks = preg_split('@(</?pre[^>]*>)|(</?style[^>]*>)|( ?</?textarea[^>]*>)@i', $html, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);

		$html = '';
		$blnPreserveNext = false;
		$blnOptimizeNext = false;

		// Recombine the markup
		foreach ($arrChunks as $strChunk)
		{
			if (strncasecmp($strChunk, '<pre', 4) === 0 || strncasecmp(ltrim($strChunk), '<textarea', 9) === 0)
			{
				$blnPreserveNext = true;
			}
			elseif (strncasecmp($strChunk, '<script', 7) === 0 || strncasecmp($strChunk, '<style', 6) === 0)
			{
				$blnOptimizeNext = true;
			}
			elseif ($blnPreserveNext)
			{
				$blnPreserveNext = false;
			}
			elseif ($blnOptimizeNext)
			{
				$blnOptimizeNext = false;

				// Minify inline scripts
				$strChunk = str_replace(array("/* <![CDATA[ */n", "<!--n", "n//-->"), array('/* <![CDATA[ */', '', ''), $strChunk);
				$strChunk = preg_replace(array('@(?<![:'"])//(?!W3C|DTD|EN).*@', '/[ nt]*(;|=|{|}|[|]|&&|,|<|>|',|",|':|":|: |||)[ nt]*/'), array('', '$1'), $strChunk);
				$strChunk = trim($strChunk);
			}
			else
			{
				$arrReplace = array
				(
					'/n ?n+/'                   => "n",    // Convert multiple line-breaks
					'/^[t ]+</m'                 => '<',     // Remove tag indentation
					'/>n<(a|input|select|span)/' => '> <$1', // Remove line-breaks between tags
					'/([^>])n/'                  => '$1 ',   // Remove line-breaks of wrapped text
					'/  +/'                       => ' ',     // Remove redundant whitespace characters
					'/n/'                        => '',      // Remove all remaining line-breaks
					'/t+/'                        => '',      // Remove tab indentation
					'/ </(div|p)>/'              => '</$1>'  // Remove spaces before closing DIV and P tags
				);

				$strChunk = str_replace("r", '', $strChunk);
				$strChunk = preg_replace(array_keys($arrReplace), array_values($arrReplace), $strChunk);
				$strChunk = trim($strChunk);
			}

			$html .= $strChunk;
		}
		return $html;
	}
```